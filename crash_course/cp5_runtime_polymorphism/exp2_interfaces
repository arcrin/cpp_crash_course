In software engineering, an interface is a shared boundary that contains no data or code. It defines function signatures
that all implementations of the interface agree to support. An implementation is code or data that declares support for
an interface. You can think of an interface as a contract between classes that implement the interface and users (also
called consumers) of that class.

Consumers know how to use implementations because they know the contract. In fact, the consumer never needs to know the
underlying implementation type. For example, in Listing 5-1 Bank is a consumer of ConsoleLogger.

Interfaces impose stringent requirements. A consumer of an interface can use only the methods explicitly defined in the
interface. The Bank class doesn't need to know anything about how ConsoleLogger performs its function. All it needs to
know is how to call the log_transfer method.

Interfaces promote highly reusable and loosely coupled code. You can understand the notation for specifying an interface,
but youâ€™ll need to know a bit about object composition and implementation inheritance.